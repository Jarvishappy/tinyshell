2015-5-31
对于builtins，tsh不需要支持background运行，但是我在zsh中试了，它是支持的。

在sigint_handler中，有一句"fprintf(stdout, "Job [%d] (%d) terminated by signal %d\n", p->jid, p->pid, sig)"，
是在按下ctrl-c后，shell process接收到SIGINT信号就应该输出的。但是很奇怪的是make test07中，这一句并没有及时输出：

        tsh> ./myspin 4 &
        [1] (17070) ./myspin 4 &
        tsh> ./myspin 5         // 这里后面跟的应该是倒数第二行
        tsh> jobs
        Job [2] (17072) terminated by signal 2
        [1] (17070) Running ./myspin 4 &

然后发现加上DBG()了之后，输出顺序就正确了，我就纳闷了。忽然想到，DBG()中有调用fflush(stdout)的，难道跟这个有关系？
果不其然，我在sigint_handler的fprintf(stdout, "Job [%d] (%d) terminated by signal %d\n", p->jid, p->pid, sig)之后
加上fflush(stdout)，输出顺序就正确了。

        tsh> ./myspin 4 &
        [1] (18275) ./myspin 4 &
        tsh> ./myspin 5
        Job [2] (18277) terminated by signal 2
        tsh> jobs
        [1] (18275) Running ./myspin 4 &

这真他妈是个坑啊，printf, fprintf是所谓的buffer IO函数，我要搞清楚到底是怎么buffer的，buffer什么时候才会被flush.


2015-6-1
shell lab差不多搞定了，现在一直在测试，发现了不少bug啊：
1. waitfg不应该用kill(pid, 0)的，因为停止block的条件是process不再是foreground process，而不是terminated。kill的
方式只能判断是不是terminated，并且被reaped了。

2. bg, fg命令都没有校验参数的合法性

2015-6-4
In sigchld_handler, how to determine what causes child terminated (by a kill() or normally) or stopped?
Maybe I should use void (*sa_sigaction)(int, siginfo_t*, void*) to handle SIGCHLD.
答：通过waitpid()的第二个参数state就可以判断了。WIFSIGNALED，WIFSTOPPED，WIFSIGNALED, WIFSTOPPED就可以判断了。


Use close(), dup2(oldfd, newfd), pipe() to implement "|" semantics.

